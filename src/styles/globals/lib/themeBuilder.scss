/** OTT Theme Builder v1.0 **/

/// Genera una mutaci贸n de color
/// @access private
/// @param {List} $mutationList - Lista con los atributos de la mutaci贸n
/// @param {Map} $theme - Objeto de configuraci贸n del tema
/// @return {Color}

@function colorMutator($mutationList, $theme) {
    @if map-get($theme, 'type') == 'light' {
        $base: white !global;
        $invert: black !global;
    } @else if map-get($theme, 'type') == 'dark' {
        $base: black !global;
        $invert: white !global;
    } @else {
        @warn "#{map-get($theme, 'type')}: Theme's type isn't valid";
    }
    $mutationType: nth($mutationList, 1);
    $color: map-get($theme, nth($mutationList, 2));
    $mutator: nth($mutationList, 3);
    @if $mutationType == 'tint' {
        @return mix($base, $color, $mutator);
    } @else if $mutationType == 'shade' {
        @return mix($invert, $color, $mutator);
    } @else if $mutationType == 'fade' {
        @return adjust-color($color, $alpha: $mutator);
    } @else {
        @warn "#{$mutationType}: Isn't a valid color mutation";
        @return null;
    }
}

/// Genera un gradiente utilizando las configuraciones del tema
/// @access private
/// @param {Map} $gradientMap - Objeto con los atributos del gradiente
/// @param {Map} $theme - Objeto de configuraci贸n del tema
/// @return {Gradient}

@function themeGradient($gradientMap, $theme) {
    $type: map-get($gradientMap, 'type');
    $fromColor: map-get($theme, map-get($gradientMap, 'fromColor'));
    $toColor: map-get($theme, map-get($gradientMap, 'toColor'));
    $fromColorWithAlpha: adjust-color($fromColor, $alpha: map-get($gradientMap, 'fromOpacity'));
    $toColorWithAlpha: adjust-color($toColor, $alpha: map-get($gradientMap, 'toOpacity'));
    $deg: map-get($gradientMap, 'deg');
    $radialParams: map-get($gradientMap, 'radialParams');
    @if $type == 'linear' {
        @return linear-gradient($deg, $fromColorWithAlpha 0%, $toColorWithAlpha 100%);
    } @else if $type == 'radial' {
        @return radial-gradient(unquote($radialParams), $fromColorWithAlpha 0%, $toColorWithAlpha 100%);
    } @else {
        @warn "Gradient's type isn't implemented yet";
        @return null;
    }
}

/// Genera los atributos del componente por cada tema configurado
/// @access public
/// @param {Map} $attr - Objeto de atributos del componente

@mixin themeBuilder($attr, $scope: 'global') {
    @each $theme in $themes {
        $name: map-get($theme, 'name');
        $type: map-get($theme, 'type');
        @at-root .#{$name}-theme & {
            @each $key, $value in $attr {
                @if type-of($value) == 'map' {
                    @if map-has-key($value, 'gradient') {
                        $gradientMap: map-get($value, 'gradient');
                        #{$key}: themeGradient($gradientMap, $theme);
                    } 
                } 
                @else if type-of($value) == 'list' {
                    #{$key}: colorMutator($value, $theme);
                }
                @else {
                    #{$key}: map-get($theme, $value);
                }
            }
        }
        @if $scope == 'global' {
            @at-root .#{$name}-theme-scoped & {
                @each $key, $value in $attr {
                    @if type-of($value) == 'map' {
                        @if map-has-key($value, 'gradient') {
                            $gradientMap: map-get($value, 'gradient');
                            #{$key}: themeGradient($gradientMap, $theme) !important;
                        } 
                    } 
                    @else if type-of($value) == 'list' {
                        #{$key}: colorMutator($value, $theme) !important;
                    }
                    @else {
                        #{$key}: map-get($theme, $value) !important;
                    }
                }
            }
        }
    }
};