/// Comprueba si existe una mutación de color en los atributos
/// @access private
/// @param {Map} $attr - Objeto de atributos del componente
/// @return {Boolean}
@function hasColorMutation($attr) {
    @if (map-has-key($attr, 'tint') or map-has-key($attr, 'shade') or map-has-key($attr, 'fade')) {
        @return true;
    } @else {
        @return false;
    }
}

/// Genera una mutación de color
/// @access private
/// @param {Map} $mutationMap - Objeto con los atributos de la mutación
/// @param {Map} $theme - Objeto de configuración del tema
/// @return {Color}
@function colorMutator($mutationMap, $theme) {
    $type: map-get($theme, 'type');
    @if map-has-key($mutationMap, 'tint') {
        $tintMap: map-get($mutationMap, 'tint');
        $color: map-get($theme, map-get($tintMap, 'color'));
        $percent: map-get($tintMap, 'percent');
        @if $type == 'light' {
            @return mix(white, $color, $percent);
        } @else {
            @return mix(black, $color, $percent);
        }
    } @else if map-has-key($mutationMap, 'shade') {
        $shadeMap: map-get($mutationMap, 'shade');
        $color: map-get($theme, map-get($shadeMap, 'color'));
        $percent: map-get($shadeMap, 'percent');
        @if $type == 'light' {
            @return mix(black, $color, $percent);
        } @else {
            @return mix(white, $color, $percent);
        }
    } @else if map-has-key($mutationMap, 'fade') {
        $fadeMap: map-get($mutationMap, 'fade');
        $color: map-get($theme, map-get($fadeMap, 'color'));
        $opacity: map-get($fadeMap, 'opacity');
        @return adjust-color($color, $alpha: $opacity);
    }
}

/// Genera un gradiente utilizando las configuraciones del tema
/// @access private
/// @param {Map} $gradientMap - Objeto con los atributos del gradiente
/// @param {Map} $theme - Objeto de configuración del tema
/// @return {Gradient}
@function themeGradient($gradientMap, $theme) {
    $type: map-get($gradientMap, 'type');
    $fromColor: map-get($theme, map-get($gradientMap, 'fromColor'));
    $toColor: map-get($theme, map-get($gradientMap, 'toColor'));
    $fromColorWithAlpha: adjust-color($fromColor, $alpha: map-get($gradientMap, 'fromOpacity'));
    $toColorWithAlpha: adjust-color($toColor, $alpha: map-get($gradientMap, 'toOpacity'));
    $deg: map-get($gradientMap, 'deg');
    $radialParams: map-get($gradientMap, 'radialParams');
    @if $type == 'linear' {
        @return linear-gradient($deg, $fromColorWithAlpha 0%, $toColorWithAlpha 100%);
    } @else if $type == 'radial' {
        @return radial-gradient(unquote($radialParams), $fromColorWithAlpha 0%, $toColorWithAlpha 100%)
    } @else {
        @warn "Gradient's type isn't implemented yet";
    }
}

/// Genera los atributos del componente por cada tema configurado
/// @access public
/// @param {Map} $attr - Objeto de atributos del componente

@mixin themeBuilder($attr) {
    @each $theme in $themes {
        $name: map-get($theme, 'name');
        $type: map-get($theme, 'type');
        @at-root .#{$name}-theme & {
            @each $key, $value in $attr {
                @if type-of($value) == 'map' {
                    @if map-has-key($value, 'gradient') {
                        $gradientMap: map-get($value, 'gradient');
                        #{$key}: themeGradient($gradientMap, $theme);
                    } 
                    @else if hasColorMutation($value) {
                        #{$key}: colorMutator($value, $theme);
                    }
                } 
                @else {
                    #{$key}: map-get($theme, $value);
                }
            }
        }
    }
};